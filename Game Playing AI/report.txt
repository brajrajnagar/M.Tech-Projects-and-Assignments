BRAJ RAJ NAGAR		Entry No: 2022AIB2682


heuristic for game:
score is awarded according to the points they obtained and how good thier move was. good move is that increase the possibility of obtaining the points in future. I check the board for diffrent length of window (4,3,2) row wise, column wise and diagonally. for example if window length is 4 and there is 3 my dots and 1 empty then that move consider good move because it contibute in 3 combination points and keep open the possibility of converting it into 4 combination points. same thing is done for 2 my dots and 2 empty. although this is not as good move as the previous one. so it is awarded less score compare to previous one. similar concept is applied to the window length 3 and 2. In this game it is important that opposition does not make large cluster so to break the cluster of opposition for each window size and it's combinations penalty is 1.5 time. and it also obsevered more column accured by our dot leads to the better results beacuse it increase the ood move possibility in daigonal direction also. so colum move is always prefered than row move for same configuration. 

in get_intelligent_move function minimax with alpha beta pruning algorithm is applied with huristic that is mentione above.
The computation time is drastically reduced with alpha beta prunning. We can now search much more quickly and even explore deeper layers of the game tree due to pruning. It removes game tree branches that don't need to be searched because there is already a better move accessible.The algorithm keeps track of two variables, alpha and beta, which stand for the lowest score that the player who maximises their score is guaranteed to receive and the maximum score that the player who minimises their score is guaranteed to receive. Beta starts with a positive infinity value and alpha with a negative one, meaning that both players begin with the lowest conceivable score. The maximising player does not need to take into account any further descendants of this node because they will never be reached in the actual play whenever the maximum score that the minimising player (i.e., the "beta" player) is assured of becomes less than the minimum score that the maximising player (i.e., the "alpha" player) is assured of (i.e., beta alpha).

in get_expectimax_move function expectimax algorithm is applied. Expectimax does not make the assumption made by Minimax that the opponent (the minimizer) performs optimally. This is helpful for simulating circumstances where opposing agents behave randomly or inefficiently. The levels of the tree alternate from max to min in the classic minimax approach until the tree's maximum depth is reached. The "chance" nodes and the max and min nodes are interspersed in an expectiminimax tree. Chance nodes take a weighted average instead of the maximum or minimum utility values of their offspring, with the weight representing the likelihood that child will be achieved.

